

1: 我们项目使用的是ｍｖｔ的模式（ｍｖｃ）
    １。１　ｍ　ｍｏｄｅｌｓ（业务模型，和数据库交互）
    １。２　ｖ　ｖｉｅｗｓ（业务逻辑，主要处理业务）
    １。３　ｔ　ｔｅｍｐｌａｔｅ（模板，主要负责数据展示）

2:　项目规划
    ２。１　ｈｏｍｅ页面（数据展示以及导航）
    ２。２　ｍａｒｋｅｔ页面（商品展示）
    ２。３　ｓｈｏｐｃａｒ（购物车）
    ２。４　ｍｉｎｅ（我的）

３：　项目开发

    ３。１　把静态资源变成静态模块，然后写成公共的部分。
    ３。２　ｂａｓｅ。ｈｔｍｌ需要加载所有通用的静态资源。ｊｑｕｅｒｙ　ｓｗｐｉｅｒ　ｂｏｏｔｓｔｒａｐ
    ３。３　写项目的公共部分　ｈｅａｄｅｒ　ｆｏｏｔｅｒ。　　ｂａｓｅ_ｍａｉｎ.ｈｔｍｌ文件
    ３。４　ｈｏｍｅ，ｍａｒｋｅｔ，ｓｈｏｐｃａｒ，ｍｉｎｅ页面继承自ｂａｓｅ_ｍａｉｎ。ｈｔｍｌ
    ３。５　对应的功能开发。
        ３。５。１　ｈｏｍｅ：　查询数据并且显示。　　ｍａｓｔｂｕｙ做了切片
        ３。５。２　ｍａｒｋｅｔ：　显示商品数据。　
               　３。５。２。１　根据大的类别查询所有商品。
               　３。５。２。２　根据排序方式来排序商品。
               　３。５。２。３　根据大类别下的小类别来查询商品。
               　３。５。２。４　大类别下的小类别是通过字符串切割以及转成列表来显示。
                ３。５。２。５　参数传递
                    #正则匹配　　注意　ｄｊａｎｇｏ２。０　的　ｐａｔｈ　不支持
                    #通过参数传递。　　写在html页面：　/market_by_typeid/?typeid=12345&sort=2&sontype=111
                ３。５。２。６　ｊｓ。
                    ｄｉｖ的显示隐藏，　购物车加减（使用的是　ａｊａｘ请求）
        ３。５。３　ｓｈｏｐｃａｒ：　购物车（必须是登陆成功以后才可以）
            ３。５。３。１　加入购物车　。　第一种是没有（新增）　一种是有（数量加一并且更新）
            ３。５。３。２　移除购物车　。　第一种是数量为１（移除）　一种是数量大于１（数量减一并更新）
            ３。５。３。３　显示购物车　。　要根据用户ｉｄ来查询
            ３。５。３。４　全选以及全不选的状态保持　。　
        ３。５。４　订单。
            ３。５。４。１　订单表　：　一笔订单（有可能包含多个商品。）　　这是谁的订单，订单数量，创建时间，收货地址ｉｄ，订单状态
            ３。５。４。２　订单详情　：　一笔订单里面的多个商品信息。　　　订单ｉｄ，商品ｉｄ，商品数量，总价
            ３。５。４。３　生成订单，生成订单详情（购物车的勾选数据），删除购物车数据。
            ３。５。４。４　订单状态。（未付款　　以付款　　　以发货　　以评价　　　　以退款）　　根据点击不同的按钮来修改状态。

            未做：　订单查询（根据状态时间等等字段来过滤查询）。　　只能查询自己的订单。
                   订单的状态流转。　登陆，　注册。

4：项目部署

    4.1 什么是ｗｅｂ服务器？
        就是将你写的代码发布在网络上。他就是软件。

        ｕｗｓｇｉ服务器
            １　：　安装
            ２　：　配置
            ３　：　使用

    4.2　负载均衡